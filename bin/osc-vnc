#!/usr/bin/env ruby

require 'optparse'
require 'osc/vnc'

######################################
# Parse options
######################################

options = {:name => 'vnc', :cluster => 'glenn', :outdir => ENV['PWD'], :xdir => nil,
           :xstartup => 'xstartup', :xlogout => 'xlogout', :walltime => '00:05:00'}

# Parser
OptionParser.new do |opts|
  opts.banner = "Usage: vncsubmit [options]"

  opts.separator ""
  opts.separator "Specific options:"

  opts.on('-c', '--cluster cluster', [:glenn, :oakley, :ruby] , 'Cluster (default = glenn, oakley, ruby)') do |cluster|
    options[:cluster] = cluster
  end

  opts.on('-o', '--outdir output_dir', 'Output directory (default = .)') do |outdir|
    options[:outdir] = File.expand_path(outdir)

    if File.file? options[:outdir]
      puts "The output directory supplied is a file: #{options[:outdir]}"
      exit
    end
  end

  opts.on('-x', '--xdir xstartup_dir', 'Xstartup directory') do |xdir|
    options[:xdir] = File.expand_path(xdir)

    if !Dir.exists? options[:xdir]
      puts "The xstartup directory does not exist: #{options[:xdir]}"
      exit
    end
  end

  opts.separator ""
  opts.separator "Common options:"

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

# Make sure xstartup directory exists
if options[:xdir] == nil
  puts "Please supply an xstartup directory"
  exit
end

# Make sure xstartup file exists
if !File.exists? "#{options[:xdir]}/#{options[:xstartup]}"
  puts "The xstartup script does not exist: #{options[:xdir]}/#{options[:xstartup]}"
  exit
end

######################################
# Begin submission of batch job
######################################

puts OSC::VNC::Session.new(options).run.to_s
