#!/usr/bin/env ruby

require 'pbs'
require 'optparse'
require 'socket'

# Path of script
PATH = File.expand_path(File.dirname(__FILE__))

######################################
# Parse options
######################################

# Default options
options = {:name => 'vnc', :cluster => 'glenn', :outdir => ENV['PWD'], :xdir => nil,
           :xstartup => 'xstartup', :xlogout => 'xlogout', :walltime => '00:05:00'}

# Parser
OptionParser.new do |opts|
  opts.banner = "Usage: vncsubmit [options]"

  opts.separator ""
  opts.separator "Specific options:"

  opts.on('-c', '--cluster cluster', [:glenn, :oakley, :ruby] , 'Cluster (default = glenn, oakley, ruby)') do |cluster|
    options[:cluster] = cluster
  end

  opts.on('-o', '--outdir output_dir', 'Output directory (default = .)') do |outdir|
    options[:outdir] = File.expand_path(outdir)

    if File.file? options[:outdir]
      puts "The output directory supplied is a file: #{options[:outdir]}"
      exit
    end
  end

  opts.on('-x', '--xdir xstartup_dir', 'Xstartup directory') do |xdir|
    options[:xdir] = File.expand_path(xdir)

    if !Dir.exists? options[:xdir]
      puts "The xstartup directory does not exist: #{options[:xdir]}"
      exit
    end
  end

  opts.separator ""
  opts.separator "Common options:"

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

# Make sure xstartup directory exists
if options[:xdir] == nil
  puts "Please supply an xstartup directory"
  exit
end

# Make sure xstartup file exists
if !File.exists? "#{options[:xdir]}/#{options[:xstartup]}"
  puts "The xstartup script does not exist: #{options[:xdir]}/#{options[:xstartup]}"
  exit
end

######################################
# Begin submission of batch job
######################################

# Make output directory if it doesn't already exist
FileUtils.mkdir_p(options[:outdir])

# Use latest torque library
PBS.set('/usr/local/torque-4.2.8/lib/libtorque.so')

# Special batch server for oxymoron cluster
server = 'oak-batch.osc.edu:17001'
c = PBS.pbs_connect(server)

# Setup VNC job
host = Socket.gethostname
attropl = []
attropl << {name: PBS::ATTR_N, value: options[:name]}
attropl << {name: PBS::ATTR_l, resource: "walltime", value: options[:walltime]}
attropl << {name: PBS::ATTR_l, resource: "nodes", value: "1:ppn=1:#{options[:cluster]}"}
attropl << {name: PBS::ATTR_o, value: "#{host}:#{options[:outdir]}/$PBS_JOBID.output"}
attropl << {name: PBS::ATTR_j, value: "oe"}
attropl << {name: PBS::ATTR_M, value: "noreply@osc.edu"}
attropl << {name: PBS::ATTR_S, value: "/bin/bash"}
attropl << {name: PBS::ATTR_v, value: "PBS_O_WORKDIR=#{PATH},XSTARTUP_DIR=#{options[:xdir]}"}

# Submit new job
pbsid = PBS.pbs_submit(c, attropl, "#{PATH}/vnc.pbs", nil, nil)

# Disconnect after submission
PBS.pbs_disconnect(c)

# Output jobid to stdout
puts pbsid
