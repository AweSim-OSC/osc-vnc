require 'mustache'

module OSC
  module VNC
    # Provides a view for a variety of connection information templates in
    # templates/conn. Extra options can be passed to this view and accessed
    # directly in the mustache templates.
    class ConnView < Mustache
      self.template_path = CONN_TEMPLATE_PATH

      # @return [ScriptView] The script object with information about the job setup.
      attr_reader :script

      # @return [Pathname] The path to the connection file.
      attr_reader :connfile

      # @param script [ScriptView] The script object with information about the job setup..
      # @param connfile [#to_s] The connection file with the connection information.
      # @param opts [Hash] The options used to construct a connection information view.
      def initialize(script, connfile, opts = {})
        @script = script
        @connfile = Pathname.new(connfile.to_s)
        refresh
      end

      # @!method render(format, context = {})
      #   Generates a string from a template depending on the format name,
      #   current options include (:jnlp, :awesim, :terminal, :txt, :vnc,
      #   :yaml) (see templates/conn/*.mustache).
      #   @param [Symbol] format the format the connection info will be displayed in
      #   @param [Hash] context the context to be applied to mustache template
      #   @return [String] the mustache generated view of the template

      # The user to use for the ssh connection.
      # @return [String] the current user
      def sshuser
        ENV['USER']
      end

      # The host to use for the ssh connection.
      # @return [String] the hostname for the login node
      def sshhost
        "#{script.cluster}.osc.edu"
      end

      # Get connection info from file generated by PBS batch job (read
      # template/script/vnc.mustache).
      #
      # @return [ConnView] the connection view object
      # @raise [InvalidPath] if connection file does not exist
      # @raise [InvalidConnInfo] if connection file doesn't contain required information (i.e.: host, port, display, password)
      def refresh
        _get_file_contents(connfile.to_s)
        self
      end

      # Check if the method call exists on @conn_context or the script object
      #
      # @param method_name the method name called
      # @param arguments the arguments to the call
      # @param block an optional block for the call
      def method_missing(method_name, *arguments, &block)
        @conn_context.fetch(method_name) do
          if script.respond_to? method_name
            script.send method_name
          else
            super
          end
        end
      end

      # Checks if the method responds to an instance method, or is able to
      # proxy it to @conn_context or the script object.
      #
      # @param method_name the method name to check
      # @return [Boolean]
      def respond_to_missing?(method_name, include_private = false)
        @conn_context.include?(method_name) || script.respond_to?(method_name) || super
      end


      private

      # Get connection information from a file.
      def _get_file_contents(file)
        raise InvalidPath, "connection file doesn't exist" unless File.file?(file)
        _parse File.read(file)
      end

      # Parse out connection info from a string.
      def _parse(string)
        context = Hash[string.scan(/^(.*): (.*)$/)]
        @conn_context = {}
        context.each do |key, value|
          @conn_context[key.downcase.to_sym] = value
        end
      end
    end
  end
end
