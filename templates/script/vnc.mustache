# Set some environment variables used by this script
{{> _setup_env}}
export VNC_PASSFILE={{outdir}}/${PBS_JOBID}.pass

# Set the host
HOST=$(hostname)

# Use turbovnc
{{{load_turbovnc}}}

{{#vncauth?}}
# Allow the ability to dynamically change VNC password
function change_passwd {
    # Generate password for VNC
    PASSWORD=$(mkpasswd -s 0 -l 8)  # passwords truncated to 8 letters
    SPASSWORD=${SPASSWORD:-$(mkpasswd -s 0 -l 8)}
    printf "${PASSWORD}\n${SPASSWORD}" | vncpasswd -f > ${VNC_PASSFILE}
    chmod 600 ${VNC_PASSFILE}
}
change_passwd
{{/vncauth?}}

# Function that creates a connection information file
function create_connfile {
    echo "Host: ${HOST}" > ${VNC_OUTFILE}
    echo "Port: ${HOST_PORT}" >> ${VNC_OUTFILE}
    echo "Password: ${PASSWORD}" >> ${VNC_OUTFILE}
    echo "SPassword: ${SPASSWORD}" >> ${VNC_OUTFILE}
    echo "Display_Port: ${DISPLAY_PORT}" >> ${VNC_OUTFILE}
    echo "Web_Port: ${WEB_PORT}" >> ${VNC_OUTFILE}
    chmod 600 ${VNC_OUTFILE}
}

# Clean up script run when "vncserver" finishes or dies prematurely
# Note: must be defined after `module load`
function clean_up {
    echo "Exiting..."
    vncserver -kill :${DISPLAY_PORT}
    {{{xlogout}}}
}
trap clean_up TERM EXIT

{{> _start_vncserver}}

# Parse output for ports
DISPLAY_PORT=$(echo "${VNC_OUT}" | awk -F':' '/^Desktop/{print $NF}')
HOST_PORT=$((5900+DISPLAY_PORT))

{{#otp?}}
# Parse output for password
PASSWORD=$(echo "${VNC_OUT}" | awk '/^Full/{print $NF}')
{{/otp?}}

# Run the xstartup script on proper vncserver display
DISPLAY=:${DISPLAY_PORT} {{xstartup}} >> ${VNC_LOGFILE} 2>&1 &
SCRIPT_PID=$!

{{#novnc?}}
# Bash helper functions
{{> _bash_helpers}}

# Launch noVNC on available port
export WEB_PORT=$(find_port)
{{{novnc_launcher}}} --vnc localhost:${HOST_PORT} --listen ${WEB_PORT} >> ${VNC_LOGFILE} 2>&1 &
{{/novnc?}}

{{#vncauth?}}
# Check for authenticated user connections to VNC server then change password
while read -r line; do
    if [[ ${line} =~ "Full-control authentication enabled for" ]]; then
        change_passwd
        create_connfile
        echo "Changing VNC password..." >> ${VNC_LOGFILE}
    fi
done < <(tail -f ${VNC_LOGFILE}) &
{{/vncauth?}}

# Create the connection file
create_connfile

{{> _tcp_server}}

# Wait for main process to finish
while [ -e /proc/${VNC_PID} ]; do sleep 0.1; done

# Exit cleanly
exit 0
