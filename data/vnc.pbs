# Use turbovnc
# FIXME: This will fail for Oakley
VNC_MODULE=${VNC_MODULE:-"turbovnc-1.2"}
module load ${VNC_MODULE}

# requires these env vars: OUTDIR, XDIR, XSTARTUP, XLOGOUT

XSTARTUP=${XDIR}/${XSTARTUP}
XLOGOUT=${XDIR}/${XLOGOUT}
OUTFILE=${OUTDIR}/${PBS_JOBID}.conn
LOGFILE=${OUTDIR}/${PBS_JOBID}.log

# Get local hostname
HOST=$(uname -n)

# Clean up script run when "vncserver" finishes or dies prematurely
function clean_up {
    echo "Exiting..."
    # Better safe than sorry when cleaning up vnc server
    vncserver -kill :${DISPLAY_PORT}
    # Run developer cleanup script
    if [ -f "${XLOGOUT}" ]; then
        echo "Running logout script"
        . ${XLOGOUT}
    fi
}
trap clean_up TERM EXIT

# Set defaults unless already set
VNC_GEOM=${VNC_GEOM:-"1024x768"}
VNC_DPI=${VNC_DPI:-"96"}
VNC_FONTS=${VNC_FONTS:-"/usr/share/X11/fonts/misc,/usr/share/X11/fonts/75dpi,/usr/share/X11/fonts/100dpi,/usr/share/X11/fonts/Type1,/usr/share/fonts/default/Type1"}

# Start up vnc server and create output
# -idletimeout = max time server will run without user before dying
# By default vncserver runs all 3 auth's. We turn off pam and vncauth.
# If two servers start simultaneously one will fail, loop until it succeeds
i=0
while [[ -z "${VNC_PID}" && "$i" -lt 30 ]]; do
    # Clean up any failed vnc sessions that didn't clean themselves up
    vncserver -list | awk '/^:/{display[$1] = $2} END{for(key in display) { if( system( "[ ! -e /proc/" display[key] " ]" ) == 0 ) { system( "vncserver -kill " key ) } }}'
    # Run the vncserver
    VNC_OUT=$(vncserver -geometry ${VNC_GEOM} -dpi ${VNC_DPI} -fp ${VNC_FONTS} -otp -novncauth -nopam -nohttpd -idletimeout 60 -log ${LOGFILE} -xstartup ${XSTARTUP} ${VNC_ARGS} 2>&1)
    VNC_PID=$(pgrep -s 0 Xvnc)  # Get process id
    # VNC couldn't find display so died
    if [ -z "${VNC_PID}" ]; then
        sleep 0.$(($RANDOM % 100))s # Sleep between 0-1 seconds
    fi
    # Sometimes VNC will hang if it fails to find working display
    if [[ ! -z "${VNC_PID}" && "${VNC_OUT}" == *"Fatal server error"* ]]; then
        kill -9 ${VNC_PID}
        unset VNC_PID
    fi
    i=$((i+1))  # increment counter
done
echo "${VNC_OUT}"

# Make sure it is running otherwise exit
if [ -z "${VNC_PID}" ]; then
    exit 1
fi

# Parse output for ports
DISPLAY_PORT=$(echo "${VNC_OUT}" | awk -F':' '/^Desktop/{print $NF}')
HOST_PORT=$((5900+DISPLAY_PORT))
SOCK_PORT=$((6900+DISPLAY_PORT))

# Parse output for password
PASSWORD=$(echo "${VNC_OUT}" | awk '/^Full/{print $NF}')

# Get correct host
#
#    opt2647.ten.osc.edu => vis033.osc.edu
#    opt2648.ten.osc.edu => vis034.osc.edu
#    opt2649.ten.osc.edu => vis035.osc.edu
#    opt2650.ten.osc.edu => vis036.osc.edu
#    n0691.ten.osc.edu   => oak-vis001.osc.edu
#    n0692.ten.osc.edu   => oak-vis002.osc.edu
#
# 1. we grep the output of /sbin/ip a s to 192.148.0.0/16 to get 192.148.248.70/24, getting the first match only to ignore 192.148.248.255
#
#    7: eth0.70@eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP
#        inet 192.148.248.75/24 brd 192.148.248.255 scope global eth0.70
#
# 2. we use this as argument to dig i.e. dig +short -x 192.148.248.70
#
#     vis033.osc.edu.
#
# 3. we get rid of the ending .
# FIXME: Was this tested on Oakley vis nodes?
function vis_hostname_alias {
    /sbin/ip a s to 192.148.0.0/16 | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -n1 | xargs dig +short -x | sed 's/\.$//'
}

VISHOST=$(vis_hostname_alias)

# Output information
echo "Host: ${VISHOST}" > ${OUTFILE}
echo "Port: ${HOST_PORT}" >> ${OUTFILE}
echo "Pass: ${PASSWORD}" >> ${OUTFILE}
echo "Display: ${DISPLAY_PORT}" >> ${OUTFILE}
nc $LISTEN_HOST $LISTEN_PORT < ${OUTFILE}
rm -fr ${OUTFILE}

# Wait for vnc server process to finish
while [ -e /proc/${VNC_PID} ]; do sleep 0.1; done

# Exit cleanly
exit 0
